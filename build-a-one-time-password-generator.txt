** start of index.html **

<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <title>Color Picker</title>
    <link rel="stylesheet" href="styles.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.3.1/umd/react.development.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.3.1/umd/react-dom.development.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.26.5/babel.min.js"></script>
    <script
      data-plugins="transform-modules-umd"
      type="text/babel"
      src="index.jsx"
    ></script>
</head>

<body>
    <div id="root"></div>
    <script
      data-plugins="transform-modules-umd"
      type="text/babel"
      data-presets="react"
      data-type="module"
    >
      import { OTPGenerator } from './index.jsx';
      ReactDOM.createRoot(document.getElementById('root')).render(<OTPGenerator />);
    </script>
</body>

</html>

** end of index.html **

** start of styles.css **



** end of styles.css **

** start of index.jsx **

const { useState, useEffect, useRef } = React;

export const OTPGenerator = () => {
  const [otp, setOtp] = useState('');
  const [timeLeft, setTimeLeft] = useState(0);
  const [isCountingDown, setIsCountingDown] = useState(false);
  const timerRef = useRef(null);

  const generateOTP = () => {
    // Generate a 6-digit OTP
    const newOtp = Math.floor(100000 + Math.random() * 900000).toString();
    setOtp(newOtp);
    setTimeLeft(5);
    setIsCountingDown(true);
  };

  useEffect(() => {
    if (isCountingDown && timeLeft > 0) {
      timerRef.current = setTimeout(() => {
        setTimeLeft(prev => prev - 1);
      }, 1000);
    } else if (timeLeft === 0 && isCountingDown) {
      // Timer expired
      setIsCountingDown(false);
    }

    return () => clearTimeout(timerRef.current);
  }, [timeLeft, isCountingDown]);

  const handleButtonClick = () => {
    generateOTP();
  };

  // Determine the message for the OTP display
  const otpDisplayMessage = otp ? otp : "Click 'Generate OTP' to get a code";

  // Determine timer message
  let timerMessage = "";
  if (isCountingDown) {
    timerMessage = `Expires in: ${timeLeft} seconds`;
  } else if (otp && timeLeft === 0) {
    timerMessage = "OTP expired. Click the button to generate a new OTP.";
  } else {
    timerMessage = "";
  }

  return (
    <div className="container">
      <h1 id="otp-title">OTP Generator</h1>
      <h2 id="otp-display">{otpDisplayMessage}</h2>
      {/* Show the timer message if it exists */}
      { (isCountingDown || (otp && timeLeft === 0)) && (
        <p id="otp-timer">{timerMessage}</p>
      )}
      <button
        id="generate-otp-button"
        onClick={handleButtonClick}
        disabled={isCountingDown}
      >
        Generate OTP
      </button>
    </div>
  );
};

** end of index.jsx **

